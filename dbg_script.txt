## 🔧 PART 1: Step-by-Step Guide to Using the Script

> 👣 Follow these steps to apply the script in x64dbg/x32dbg:

### 🟢 Load the Target

1. **Launch x64dbg or x32dbg** depending on the target's architecture.
2. Click **File → Open** and select your target executable (malware sample).
3. Let the binary load. When paused at `EntryPoint`, proceed.

### 🟢 Open Script Tab

4. Go to the top menu bar and click **"Plugins → Script"**.

   * Or press `Ctrl+Alt+S` to open the Script Editor.
5. Paste the full script from the next section.
6. Click **"Run"** (▶️) in the Script tab to apply all breakpoints.

---

## 🧠 PART 2: Why This Script Exists

This script serves as an **automated breakpoint toolkit for malware triage**. It:

* **Catches suspicious behavior early** (before obfuscation/unpacking hides it)
* Automates detection of **common malware techniques**:

  * API hooking
  * Code injection
  * Persistence mechanisms
  * Anti-debug and sandbox evasion
* Saves time in manual breakpoint setting
* Ideal for triaging **unknown PE files, droppers, packers, and shellcode loaders**
* Enables **consistent analysis** across sessions and analysts

---

## 🛡️ PART 3: Dual-Architecture Suspicious API Breakpoint Script (x64dbg/x32dbg)

> Paste the following into the Script tab — it works for **both x64dbg and x32dbg**

```x64dbg
// =====================
// 🚨 MALWARE TRIAGE SCRIPT: SUSPICIOUS APIs
// For: x64dbg & x32dbg
// Author: Your Analyst Toolkit
// =====================
// === [1] MEMORY INJECTION / RWX ALLOCATIONS ===
bp VirtualAlloc
bp VirtualAllocEx
bp VirtualProtect
bp VirtualProtectEx
bp NtAllocateVirtualMemory
bp NtProtectVirtualMemory
bp WriteProcessMemory
bp NtWriteVirtualMemory
// === [2] PROCESS & THREAD CREATION ===
bp CreateProcessA
bp CreateProcessW
bp CreateRemoteThread
bp CreateRemoteThreadEx
bp NtCreateProcess
bp NtCreateProcessEx
bp NtCreateThreadEx
bp RtlCreateUserThread
// === [3] DLL LOADING & REFLECTION ===
bp LoadLibraryA
bp LoadLibraryW
bp LoadLibraryExA
bp LoadLibraryExW
bp LdrLoadDll
bp GetProcAddress
bp LdrGetProcedureAddress
bp LdrGetProcedureAddressForCaller
// === [4] ANTIDEBUGGING & ENV DETECTION ===
bp IsDebuggerPresent
bp CheckRemoteDebuggerPresent
bp NtQueryInformationProcess
bp NtSetInformationThread
bp OutputDebugStringA
bp OutputDebugStringW
bp GetTickCount
bp QueryPerformanceCounter
bp GetSystemTimeAsFileTime
bp NtClose
// === [5] NETWORK OPERATIONS ===
bp InternetOpenA
bp InternetOpenW
bp InternetConnectA
bp InternetConnectW
bp HttpOpenRequestA
bp HttpOpenRequestW
bp WinHttpOpen
bp WinHttpConnect
bp connect
bp send
bp recv
bp WSASend
bp WSARecv
bp WSAStartup
// === [6] REGISTRY TAMPERING ===
bp RegOpenKeyExA
bp RegOpenKeyExW
bp RegCreateKeyExA
bp RegCreateKeyExW
bp RegSetValueExA
bp RegSetValueExW
bp RegDeleteKeyA
bp RegDeleteKeyW
// === [7] FILE DROPPING / FILE SYSTEM ===
bp CreateFileA
bp CreateFileW
bp WriteFile
bp ReadFile
bp CopyFileA
bp CopyFileW
bp DeleteFileA
bp DeleteFileW
bp MoveFileA
bp MoveFileW
bp SetFileAttributesA
bp SetFileAttributesW
// === [8] SERVICE & SCHEDULED TASKS ===
bp OpenSCManagerA
bp OpenSCManagerW
bp CreateServiceA
bp CreateServiceW
bp StartServiceA
bp StartServiceW
bp ControlService
bp DeleteService
bp OpenServiceA
bp OpenServiceW
// === [9] COM / WMI ABUSE ===
bp CoCreateInstance
bp CoGetClassObject
bp CoInitialize
bp CoInitializeEx
bp IWbemServices::ExecQuery
bp IWbemServices::ExecMethod
// === [10] COMMON DLLS TO MONITOR ===
bp kernel32.dll
bp ntdll.dll
bp user32.dll
bp advapi32.dll
bp ws2_32.dll
bp wininet.dll
bp winhttp.dll
bp shell32.dll
bp ole32.dll
bp shlwapi.dll
bp secur32.dll
// === [11] UNPACKING HINTS / SUSPICIOUS CHAINS ===
bp ZwUnmapViewOfSection
bp ZwQueryVirtualMemory
bp ZwResumeThread
bp ZwSetContextThread
bp SetThreadContext
bp GetThreadContext
bp NtMapViewOfSection
// === [12] CUSTOM NOTES ===
log "⚡ Breakpoints set on suspicious APIs. Start execution and trace behavior."
```
---
